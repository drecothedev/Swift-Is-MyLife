Grid in SwiftUI

SwiftUI makes it very easy to layout a grid style view for iOS applications. I've used grids before when making beatpads for an app I was working on and now I am using them to organize different interactive elements within a view. 

First you initialize a Grid in your code. This grid will automatically space and arrange all of the GridRow Structs needed for displaying the grids elements. Check the example below: 


```swift
    var table = Table()
    var body: some View {
        NavigationStack {
            Grid {
                GridRow {
                    GraphicFullTableView(table: table)
                    Spacer()
                    GraphicFullTableView(table: table)
                    Spacer()
                    GraphicFullTableView(table: table)
                }
                // Dividers rather than spaces
                GridRow {
                    GraphicFullTableView(table: table)
                    Divider()
                    GraphicFullTableView(table: table)
                    Divider()
                    GraphicFullTableView(table: table)
                }
            }
        }
    }

```

In this view we are organizing our custom views in that grid form. You can also add dividers/ lines to your views to help seperate them more. Additionally, you can add alignment and spacing to your Grid Parameers ( Grid(alignment: .bottom, horizontalSpacing: 1, verticalSpacing: 1) {...} ) to customize the spacing of its child rows. 

One last note on performance. The Grid View works becasue it loads all of its child views immediately. This can be negative if your app has a lot to load or already has some efficiency issues. A solution to this could be using "LazyHGrid" or "LazyVGrid" ( if using grid in scrollview )  
